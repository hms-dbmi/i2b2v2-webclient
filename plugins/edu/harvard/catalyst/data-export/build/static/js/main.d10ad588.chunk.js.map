{"version":3,"sources":["theme.js","actions/index.js","models/StatusInfo.js","models/SaveTable.js","models/TableDefinitionRow.js","models/TableDefinition.js","models/TableListingRow.js","models/TableListing.js","models/MakeRequestDetails.js","defaultState.js","reducers/loadTableSlice.js","reducers/i2b2LibLoadedSlice.js","components/DefineTable/index.js","components/DataExport/CustomTabPanel.js","reducers/makeRequestSlice.js","components/MakeRequest/index.js","components/PreviewTable/index.js","components/TableListing/index.js","reducers/listTablesSlice.js","components/TabPanel/index.js","components/LoadTableModal/index.js","reducers/saveTableSlice.js","components/SaveTableModal/index.js","components/DataExport/index.js","sagas/loadTableSaga.js","sagas/saveTableSaga.js","sagas/listTablesSaga.js","sagas/makeRequestSaga.js","initSagas.js","store/getStore.js","reducers/rootReducer.js","App.js","index.js"],"names":["theme","createTheme","palette","primary","main","secondary","error","red","A400","LOAD_DATA_TABLE","concat","SAVE_DATA_TABLE","LIST_TABLES","MAKE_REQUEST","StatusInfo","_ref","arguments","length","undefined","_ref$status","status","_ref$errorMessage","errorMessage","propTypes","PropTypes","string","isRequired","SaveTable","_ref$table","table","_ref$isSaving","isSaving","_ref$statusInfo","statusInfo","object","bool","shape","TableDefinitionRow","_ref$id","id","_ref$order","order","_ref$name","name","_ref$display","display","_ref$locked","locked","_ref$sdxData","sdxData","_ref$dataOption","dataOption","_ref$required","required","_ref$dataType","dataType","number","DATATYPE","POSINTEGER","POSFLOAT","INTEGER","FLOAT","STRING","LARGESTRING","ENUM","generateTableDefRowId","key","Math","floor","random","TableDefinition","_ref$rows","rows","defaultRows","_ref$isFetching","isFetching","arrayOf","TableListingRow","_ref$title","title","_ref$create_date","create_date","_ref$edit_date","edit_date","_ref$column_count","column_count","_ref$user_id","user_id","instanceOf","Date","TableListing","_ref$sharedRows","sharedRows","_ref$userRows","userRows","MakeRequestDetails","_ref$patientSet","patientSet","icon","sdx","_ref$email","email","_ref$comments","comments","_ref$isSubmitting","isSubmitting","defaultState","isI2b2LibLoaded","tableDef","saveTable","tableListing","makeRequestDetails","loadTableSlice","createSlice","initialState","reducers","loadTable","state","loadTableSuccess","payload","tableDefRows","index","Object","entries","forEach","_ref2","_ref3","_slicedToArray","value","tableDefRow","push","concepts","concept","_concept$sdxData$orig","_concept$sdxData$orig2","sdxInfo","sdxKeyValue","textDisplay","origData","xmlOrig","parseXmlOrig","XMLParser","parseFromString","conceptXml","getElementsByTagName","metadataXml","toUpperCase","e","console","log","loadTableError","_ref4","handleRowDelete","_ref5","row","filter","r","sort","a","b","x","i","handleRowInsert","_ref6","_ref6$payload","rowIndex","rowId","rowOrdering","map","rowMin","min","apply","_toConsumableArray","rowMax","max","newRowIndex","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","parseInt","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","f","newRow","renderData","handleRowExported","_ref7","_ref7$payload","exported","data","_objectSpread","handleRowAggregation","_ref8","_step2","_ref8$payload","_iterator2","temp","handleRowName","_ref9","_step3","_ref9$payload","_iterator3","handleRowSdx","_ref10","_step4","_ref10$payload","_iterator4","_loadTableSlice$actio","actions","i2b2LibLoadedSlice","updateI2b2LibLoaded","DefineTable","props","dispatch","useDispatch","useSelector","_React$useState","React","useState","_React$useState2","cellModesModel","setCellModesModel","columns","field","headerName","headerClassName","width","sortable","resizable","sortingOrder","hideSortIcons","disableReorder","flex","editable","disableColumnSorting","disableColumnMenu","renderCell","_row$sdxData$renderDa","createElement","Tooltip","moreDescriptMinor","className","renderEditCell","params","GridEditInputCell","assign","inputProps","maxLength","valueSetter","cellValues","txtLab","txtMouseover","labData","LabValues","ValueType","Value","join","ValueFlag","ValueOperator","ValueLow","ValueHigh","ValueUnit","Link","href","onClick","event","handleSetValueClick","minWidth","type","valueOptions","label","headerAlign","GridActionsCellItem","LockIcon","CheckIcon","CheckBoxOutlineBlankIcon","DeleteIcon","displayLabValues","i2b2","authorizedTunnel","function","then","res","conceptDropHandler","ev","rowNum","target","closest","dataset","rowindex","tvNodeState","requestData","ont_max_records","ont_synonym_records","ont_hidden_records","concept_key_value","ajax","ONT","GetTermInfo","xmlString","xmlparser","xmlDoc","toString","valueMetadataList","metadata","finally","i2b2LibLoaded","useEffect","AttachType","setHandlerCustom","window","addEventListener","handleCellClick","useCallback","isEditable","nodeType","currentTarget","contains","prevModel","ret","keys","reduce","acc","_defineProperty","acc2","mode","GridCellModes","View","Edit","preventDefault","handleCellModesModelChange","newModel","DataGrid","style","background","showCellVerticalBorder","hideFooterSelectedRowCount","columnVisibilityModel","disableColumnSelector","onCellModesModelChange","onCellClick","onCellDoubleClick","sorting","sortModel","autoHeight","hideFooter","isCellEditable","colDef","getCellClassName","trim","Stack","spacing","direction","justifyContent","alignItems","Button","variant","tabChanger","CustomTabPanel","children","other","_objectWithoutProperties","_excluded","role","hidden","aria-labelledby","Box","sx","p","makeRequestSlice","updateRequestPatientSet","updateRequestComments","updateRequestEmail","makeRequest","makeRequestSuccess","makeRequestError","makeRequestStatusConfirmed","_makeRequestSlice$act","MakeRequest","_useState","_useState2","isEmailNotValid","setIsEmailNotValid","_useState3","_useState4","emailNotValidError","setEmailNotValidError","_useState5","_useState6","isPatientSetNotValid","setIsPatientSetNotValid","_useState7","_useState8","patientSetNotValidError","setPatientSetNotValidError","isValidRequest","isValid","test","handleConfirmStatus","handlePatientSetDrop","useFlexGap","TextField","fullWidth","slotProps","input","readOnly","helperText","InputLabelProps","shrink","disabled","defaultValue","onChange","maxRows","minRows","multiline","Backdrop","color","zIndex","drawer","open","CircularProgress","Dialog","onClose","aria-describedby","DialogTitle","DialogContent","dividers","DialogContentText","DialogActions","autoFocus","PreviewTable","setColumns","setRows","columnNames","aggType","newRows","column","time","toLocaleString","updateRows","Typography","gutterBottom","canRename","onSelect","onSelectionModelChange","selectionModel","align","height","columnHeaderHeight","density","disableColumnResize","onRowSelectionModelChange","selection","api","getRow","rowSelectionModel","autoPageSize","listTablesSlice","listTables","listTablesSuccess","tableDefs","listTablesError","_listTablesSlice$acti","TabPanel","LoadTableModal","handleClose","handleSetScreen","_useSelector","tab","setTab","selectedTable","setSelectedTable","addtlProps","maxWidth","flexGrow","boxShadow","Tabs","orientation","newValue","aria-label","borderRight","borderColor","Tab","disable","saveTableSlice","saveTableSuccess","saveTableError","saveStatusConfirmed","_saveTableSlice$actio","SaveTableModal","selectedTableDef","setSelectedTableDef","saveTableInfo","_React$useState3","_React$useState4","selectedRows","setSelectedRows","_React$useState5","_React$useState6","enteredTitle","setEnteredTitle","_React$useState7","_React$useState8","showOverwrite","setShowOverwrite","_React$useState9","_React$useState10","isNameInvalid","setIsNameInvalid","selectIfNameExists","matchedRows","srow","_srow$title","doSave","tableId","tableTitle","component","textDecoration","size","float","position","left","onSave","mt","DataExport","selectedTab","setSelectedTab","handleTabChange","newTab","handleSnackbarOpen","document","querySelector","tabProps","showLoad","setLoadViz","showSave","setSaveViz","snackbarShown","setSnackbarViz","snackbarMsg","setSnackbarMsg","msg","handleSnackbarClose","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","borderBottom","AppBar","right","marginTop","IconButton","transition","CloudDownloadSharpIcon","fontSize","CloudUploadSharpIcon","_regeneratorRuntime","t","prototype","hasOwnProperty","o","defineProperty","Symbol","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","_invoke","AsyncIterator","invoke","resolve","__await","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_marked","doLoadTable","_marked2","loadTableSaga","action","formdata","fetchConfig","response","_context","FormData","append","model","user","project","session","body","fetch","endpointUrl","ok","json","put","t0","_context2","takeLatest","doSaveTable","saveTableSaga","transformTableDef","requiredRows","_action$payload","transformedTableDef","JSON","stringify","doListTables","listTablesSaga","parseData","tableList","results","tables","shared","DateTime","fromISO","toJSDate","t1","save","t2","doMakeRequest","makeRequestSaga","dataOptions","store","rootReducers","loadTableReducer","saveTableReducer","listTablesReducer","makeRequestReducer","i2b2LibLoadedReducer","sagaMiddleware","createSagaMiddleware","configureStore","reducer","preloadedState","middleware","getDefaultMiddleware","sagas","run","bind","initSagas","getStore","ThemeProvider","Provider","variable","username","password","indexOf","lastIndexOf","substr","setTimeout","testCredentials","Request","createRoot","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.d10ad588.chunk.js","sourcesContent":["import { red } from '@mui/material/colors';\r\nimport { createTheme } from '@mui/material/styles';\r\n\r\n// A custom theme for this app\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#19857b',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","export const I2B2_LOADED = \"isI2b2Loaded\";\r\nexport const TABLE_DEF = \"tableDef\";\r\nexport const SAVE_TABLE = \"saveTable\";\r\nexport const TABLE_LISTING = \"tableListing\";\r\nexport const MAKE_REQUEST_DETAILS = \"MAKE_REQUEST_DETAILS\";\r\n\r\nexport const LOAD_DATA_TABLE = `${TABLE_DEF}/loadTable`;\r\nexport const INSERT_DATA_ROW = `${TABLE_DEF}/handleRowInsert`;\r\nexport const SAVE_DATA_TABLE = `${SAVE_TABLE}/saveTable`;\r\nexport const LIST_TABLES = `${TABLE_LISTING}/listTables`;\r\nexport const MAKE_REQUEST = `${MAKE_REQUEST_DETAILS}/makeRequest`;\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport const StatusInfo = ({\r\n    status= null,\r\n    errorMessage= null,\r\n} = {}) => ({\r\n    status,\r\n    errorMessage,\r\n});\r\n\r\nStatusInfo.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n    errorMessage: PropTypes.string,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport {StatusInfo} from \"./StatusInfo\";\r\n\r\nexport const SaveTable = ({\r\n    table = {},\r\n    isSaving= false,\r\n    statusInfo = StatusInfo(),\r\n} = {}) => ({\r\n    table,\r\n    isSaving,\r\n    statusInfo\r\n});\r\n\r\nSaveTable.propTypes = {\r\n    table: PropTypes.object,\r\n    isSaving: PropTypes.bool,\r\n    statusInfo: PropTypes.shape(StatusInfo),\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport const TableDefinitionRow = ({\r\n    id = 0,\r\n    order = 0,\r\n    name = \"\",\r\n    display = true,\r\n    locked = false,\r\n    sdxData = {},\r\n    dataOption = null,\r\n    required = false,\r\n    dataType= null\r\n\r\n} = {}) => ({\r\n    id,\r\n    order,\r\n    name,\r\n    display,\r\n    locked,\r\n    sdxData,\r\n    dataOption,\r\n    required,\r\n    dataType\r\n});\r\n\r\nTableDefinitionRow.propTypes = {\r\n    id: PropTypes.number,\r\n    name: PropTypes.string,\r\n    order: PropTypes.number,\r\n    display: PropTypes.bool,\r\n    locked: PropTypes.bool,\r\n    sdxData: PropTypes.object,\r\n    dataOption: PropTypes.string,\r\n    required: PropTypes.bool,\r\n    dataType: PropTypes.string\r\n};\r\n\r\nexport const DATATYPE = {\r\n    POSINTEGER: \"PosInteger\",\r\n    POSFLOAT : \"PosFloat\",\r\n    INTEGER: \"Integer\",\r\n    FLOAT: \"Float\",\r\n    STRING: \"String\",\r\n    LARGESTRING: \"LargeString\",\r\n    ENUM: \"Enum\"\r\n};\r\n\r\nexport const generateTableDefRowId = (key) => {\r\n    return key + '[' + Math.floor(Math.random() * 1000 + 999) + ']';\r\n};","import PropTypes from \"prop-types\";\r\nimport {StatusInfo} from \"./StatusInfo\";\r\nimport {TableDefinitionRow} from \"./TableDefinitionRow\";\r\n\r\nexport const TableDefinition = ({\r\n    rows = defaultRows,\r\n    isFetching= false,\r\n    statusInfo = StatusInfo()\r\n} = {}) => ({\r\n    rows,\r\n    isFetching,\r\n    statusInfo\r\n});\r\n\r\nTableDefinition.propTypes = {\r\n    rows: PropTypes.arrayOf(TableDefinitionRow).isRequired,\r\n    isFetching: PropTypes.bool,\r\n    statusInfo: PropTypes.shape(StatusInfo),\r\n};\r\n\r\n\r\nconst defaultRows = [\r\n    TableDefinitionRow({\r\n        \"id\": \"subject_id\",\r\n        \"order\": 1,\r\n        \"name\": \"Participant ID\",\r\n        \"display\": true,\r\n        \"locked\": true,\r\n        \"sdxData\": {\r\n            \"sdxInfo\": {\r\n                \"sdxType\": \"CONCPT\",\r\n                \"sdxKeyName\": \"key\",\r\n                \"sdxControlCell\": \"ONT\",\r\n                \"sdxKeyValue\": \"\\\\\\\\REQUIRED\\\\subject_id\\\\\",\r\n                \"sdxDisplayName\": \"Subject ID\"\r\n            }\r\n        },\r\n        \"dataOption\": \"Value\",\r\n        \"required\": true\r\n    }),\r\n    TableDefinitionRow({\r\n        \"id\": \"gender\",\r\n        \"order\": 2,\r\n        \"name\": \"Gender\",\r\n        \"display\": true,\r\n        \"locked\": false,\r\n        \"sdxData\": {\r\n            \"sdxInfo\": {\r\n                \"sdxType\": \"CONCPT\",\r\n                \"sdxKeyName\": \"key\",\r\n                \"sdxControlCell\": \"ONT\",\r\n                \"sdxKeyValue\": \"\\\\\\\\REQUIRED\\\\gender\\\\\",\r\n                \"sdxDisplayName\": \"Gender\"\r\n            }\r\n        },\r\n        \"dataOption\": \"Value\",\r\n        \"required\": true\r\n    }),\r\n    TableDefinitionRow({\r\n        \"id\": \"age\",\r\n        \"order\": 3,\r\n        \"name\": \"Age\",\r\n        \"display\": true,\r\n        \"locked\": false,\r\n        \"sdxData\": {\r\n            \"sdxInfo\": {\r\n                \"sdxType\": \"CONCPT\",\r\n                \"sdxKeyName\": \"key\",\r\n                \"sdxControlCell\": \"ONT\",\r\n                \"sdxKeyValue\": \"\\\\\\\\REQUIRED\\\\age\\\\\",\r\n                \"sdxDisplayName\": \"Age\"\r\n            }\r\n        },\r\n        \"dataOption\": \"Value\",\r\n        \"required\": true\r\n    }),\r\n    TableDefinitionRow({\r\n        \"id\": \"race\",\r\n        \"order\": 4,\r\n        \"name\": \"Race\",\r\n        \"display\": true,\r\n        \"locked\": false,\r\n        \"sdxData\": {\r\n            \"sdxInfo\": {\r\n                \"sdxType\": \"CONCPT\",\r\n                \"sdxKeyName\": \"key\",\r\n                \"sdxControlCell\": \"ONT\",\r\n                \"sdxKeyValue\": \"\\\\\\\\REQUIRED\\\\race\\\\\",\r\n                \"sdxDisplayName\": \"Race\"\r\n            }\r\n        },\r\n        \"dataOption\": \"Value\",\r\n        \"required\": true\r\n    }),\r\n    TableDefinitionRow({\r\n        \"id\": \"ethnicity\",\r\n        \"order\": 5,\r\n        \"name\": \"Ethnicity\",\r\n        \"display\": true,\r\n        \"locked\": false,\r\n        \"sdxData\": {\r\n            \"sdxInfo\": {\r\n                \"sdxType\": \"CONCPT\",\r\n                \"sdxKeyName\": \"key\",\r\n                \"sdxControlCell\": \"ONT\",\r\n                \"sdxKeyValue\": \"\\\\\\\\REQUIRED\\\\ethnicity\\\\\",\r\n                \"sdxDisplayName\": \"Ethnicity\"\r\n            }\r\n        },\r\n        \"dataOption\": \"Value\",\r\n        \"required\": true\r\n    }),\r\n    TableDefinitionRow({\r\n        \"id\": \"vital_status\",\r\n        \"order\": 6,\r\n        \"name\": \"Deceased\",\r\n        \"display\": true,\r\n        \"locked\": false,\r\n        \"sdxData\": {\r\n            \"sdxInfo\": {\r\n                \"sdxType\": \"CONCPT\",\r\n                \"sdxKeyName\": \"key\",\r\n                \"sdxControlCell\": \"ONT\",\r\n                \"sdxKeyValue\": \"\\\\\\\\REQUIRED\\\\vital_status\\\\\",\r\n                \"sdxDisplayName\": \"Vital Status\"\r\n            }\r\n        },\r\n        \"dataOption\": \"Value\",\r\n        \"required\": true\r\n    })\r\n];\r\n\r\n","import PropTypes from \"prop-types\";\r\n\r\nexport const TableListingRow = ({\r\n    id= null,\r\n    title = null,\r\n    create_date= null,\r\n    edit_date =  null,\r\n    column_count = 0,\r\n    user_id= null\r\n } = {}) => ({\r\n    id,\r\n    title,\r\n    create_date,\r\n    edit_date,\r\n    column_count,\r\n    user_id\r\n});\r\n\r\nTableListingRow.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    create_date: PropTypes.instanceOf(Date).isRequired,\r\n    edit_date: PropTypes.instanceOf(Date).isRequired,\r\n    column_count: PropTypes.number.isRequired,\r\n    user_id: PropTypes.string.isRequired\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport {StatusInfo} from \"./StatusInfo\";\r\nimport {TableListingRow} from \"./TableListingRow\";\r\n\r\nexport const TableListing = ({\r\n    sharedRows = [],\r\n    userRows = [],\r\n    isFetching= false,\r\n    statusInfo = StatusInfo(),\r\n} = {}) => ({\r\n    sharedRows,\r\n    userRows,\r\n    isFetching,\r\n    statusInfo\r\n});\r\n\r\nTableListing.propTypes = {\r\n    sharedRows: PropTypes.arrayOf(TableListingRow),\r\n    userRows: PropTypes.arrayOf(TableListingRow),\r\n    isFetching: PropTypes.bool,\r\n    statusInfo: PropTypes.shape(StatusInfo),\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport {StatusInfo} from \"./StatusInfo\";\r\n\r\nexport const MakeRequestDetails = ({\r\n    patientSet = {\r\n        title: \"\",\r\n        icon: null,\r\n        sdx: {}\r\n    },\r\n    email = \"\",\r\n    comments= \"\",\r\n    isSubmitting= false,\r\n    statusInfo = StatusInfo(),\r\n} = {}) => ({\r\n    patientSet,\r\n    email,\r\n    comments,\r\n    isSubmitting,\r\n    statusInfo\r\n});\r\n\r\nMakeRequestDetails.propTypes = {\r\n    patientSet: PropTypes.object.isRequired,\r\n    email: PropTypes.string,\r\n    comments: PropTypes.string,\r\n    isSubmitting: PropTypes.bool,\r\n    statusInfo: PropTypes.shape(StatusInfo),\r\n};\r\n","import {SaveTable, TableDefinition, TableListing, MakeRequestDetails} from \"./models\";\r\n\r\nexport const defaultState = {\r\n    isI2b2LibLoaded: false,\r\n    tableDef: TableDefinition(),\r\n    saveTable: SaveTable(),\r\n    tableListing: TableListing(),\r\n    makeRequestDetails: MakeRequestDetails()\r\n};","import { createSlice } from '@reduxjs/toolkit'\r\nimport { TABLE_DEF } from \"../actions\";\r\nimport { defaultState } from '../defaultState';\r\nimport {StatusInfo, TableDefinitionRow} from \"../models\";\r\nimport {DATATYPE, generateTableDefRowId} from \"../models/TableDefinitionRow\";\r\nimport XMLParser from 'react-xml-parser';\r\n\r\nexport const loadTableSlice = createSlice({\r\n    name: TABLE_DEF,\r\n    initialState: defaultState.tableDef,\r\n    reducers: {\r\n        loadTable: state => {\r\n            state.isFetching = true;\r\n            state.statusInfo = StatusInfo();\r\n        },\r\n        loadTableSuccess: (state, { payload: table }) => {\r\n            state.isFetching = false;\r\n\r\n            let tableDefRows = [];\r\n            let index=1;\r\n            if(table.required){\r\n                Object.entries(table.required).forEach(([key, value]) => {\r\n                    let tableDefRow = TableDefinitionRow({\r\n                        id: key,\r\n                        order: index,\r\n                        name: value.name,\r\n                        display: value.display,\r\n                        locked: value.locked,\r\n                        dataOption: \"Value\",\r\n                        required: true,\r\n                    });\r\n                    tableDefRows.push(tableDefRow);\r\n                    index++;\r\n                })\r\n            }\r\n\r\n            table.concepts.forEach(concept => {\r\n                let tableDefRow = TableDefinitionRow({\r\n                    id: generateTableDefRowId(concept.sdxData.sdxInfo.sdxKeyValue),\r\n                    order: index,\r\n                    name: concept.textDisplay,\r\n                    locked: concept.locked,\r\n                    dataOption: concept.dataOption,\r\n                    sdxData: concept.sdxData\r\n                });\r\n\r\n                if(concept.sdxData.origData?.xmlOrig?.length > 0){\r\n                    try{\r\n                        const xmlParser = new XMLParser();\r\n                        const parseXmlOrig = xmlParser.parseFromString(concept.sdxData.origData.xmlOrig);\r\n                        if(parseXmlOrig) {\r\n                            let conceptXml = parseXmlOrig.getElementsByTagName('concept');\r\n                            if(conceptXml.length !== 0) {\r\n                                let metadataXml = conceptXml[0].getElementsByTagName('metadataxml');\r\n                                if(metadataXml.length !== 0) {\r\n                                    let dataType = metadataXml[0].getElementsByTagName('DataType');\r\n                                    if(dataType.length !== 0 && DATATYPE[dataType[0].value.toUpperCase()]) {\r\n                                        tableDefRow.dataType = DATATYPE[dataType[0].value.toUpperCase()];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    catch(e){\r\n                        console.log(\"No value metadata xml found for concept \" + concept.textDisplay);\r\n                    }\r\n                }\r\n                tableDefRows.push(tableDefRow);\r\n                index++;\r\n            });\r\n\r\n            state.rows = tableDefRows;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"SUCCESS\"\r\n            });\r\n        },\r\n        loadTableError: (state, { payload: errorMessage }) => {\r\n            state.isFetching = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"FAIL\",\r\n                errorMessage: errorMessage\r\n            });\r\n        },\r\n        handleRowDelete:(state, { payload: { row } }) => {\r\n            state.rows = state.rows.filter(r => r.id !== row.id);\r\n            // handle reindexing the order attribute for all items\r\n            state.rows.sort((a,b) => a.order - b.order).forEach((x,i)=> { x.order = i + 1 });\r\n        },\r\n        handleRowInsert:(state, { payload: {rowIndex, rowId, sdx} }) => {\r\n            // get the range in which we can correctly place the row\r\n            const rowOrdering = state.rows.map((row)=>(row.required ? false : row.order)).filter((a)=>a);\r\n            const rowMin = (rowOrdering.length ? Math.min(...rowOrdering) : state.rows.length + 1);\r\n            const rowMax = (rowOrdering.length ? Math.max(...rowOrdering) : state.rows.length + 1);\r\n            let newRowIndex = 0;\r\n            switch (rowIndex) {\r\n                case Number.NEGATIVE_INFINITY:  // this is required, in-band signal sent from drop controller\r\n                    newRowIndex = rowMin;\r\n                    break;\r\n                case Number.POSITIVE_INFINITY:  // this is required, in-band signal sent from drop controller\r\n                    newRowIndex = rowMax + 1;\r\n                    break;\r\n                default:\r\n                    newRowIndex = parseInt(rowIndex) + 1;\r\n                    if (newRowIndex < rowMin) newRowIndex = rowMin;\r\n            }\r\n\r\n            // change the order attribute of the rows to make space for the current row\r\n            if (newRowIndex <= rowMax) {\r\n                for (let row of state.rows) {\r\n                    if (row.order >= newRowIndex) row.order++;\r\n                }\r\n            }\r\n            // create and insert the row\r\n            const newRow = TableDefinitionRow({\r\n                id: rowId,\r\n                order : newRowIndex,\r\n                name: sdx.renderData.title,\r\n                display: true,\r\n                locked: false,\r\n                sdxData: sdx,\r\n                dataOption: \"Exists\",\r\n                required: false\r\n            });\r\n            state.rows.push(newRow);\r\n            // handle reindexing the order attribute for all items (just to make sure our numbering is correct)\r\n            state.rows.sort((a,b) => a.order - b.order).forEach((x,i)=> { x.order = i + 1 });\r\n        },\r\n        handleRowExported: (state, { payload: {row, exported} }) => {\r\n            state.rows = state.rows.map((data) => (data.id === row.id ? ({...data, display: exported}) : data ));\r\n        },\r\n        handleRowAggregation: (state, { payload: {id, value} }) => {\r\n            for (let temp of state.rows) {\r\n                if (temp.id === id) {\r\n                    temp.dataOption = value;\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        handleRowName: (state, { payload: {id, value} }) => {\r\n            for (let temp of state.rows) {\r\n                if (temp.id === id) {\r\n                    temp.name = value;\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        handleRowSdx: (state, { payload: {id, sdx} }) => {\r\n            for (let temp of state.rows) {\r\n                if (temp.id === id) {\r\n                    temp.sdxData = sdx;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const {\r\n    loadTable,\r\n    loadTableSuccess,\r\n    loadTableError,\r\n    handleRowDelete,\r\n    handleRowInsert,\r\n    handleRowExported,\r\n    handleRowAggregation,\r\n    handleRowName,\r\n    handleRowSdx\r\n} = loadTableSlice.actions\r\n\r\nexport default loadTableSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\nimport { I2B2_LOADED } from \"../actions\";\r\nimport { defaultState } from '../defaultState';\r\n\r\nexport const i2b2LibLoadedSlice = createSlice({\r\n    name: I2B2_LOADED,\r\n    initialState: defaultState.isI2b2LibLoaded,\r\n    reducers: {\r\n        updateI2b2LibLoaded: (state) => {\r\n            return true;\r\n        }\r\n    }\r\n})\r\n\r\nexport const {\r\n    updateI2b2LibLoaded\r\n} = i2b2LibLoadedSlice.actions\r\n\r\nexport default i2b2LibLoadedSlice.reducer","import React, { useEffect } from \"react\";\r\n\r\nimport '../../css/tableDef.scss';\r\nimport {\r\n    DataGrid,\r\n    GridActionsCellItem,\r\n    GridCellModes,\r\n    GridEditInputCell\r\n} from '@mui/x-data-grid';\r\n\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\n\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\n\r\nimport { handleRowDelete, handleRowInsert, handleRowExported, handleRowAggregation, handleRowName, handleRowSdx} from \"../../reducers/loadTableSlice\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updateI2b2LibLoaded} from \"../../reducers/i2b2LibLoadedSlice\";\r\nimport \"./DefineTable.scss\";\r\nimport {DATATYPE, generateTableDefRowId} from \"../../models/TableDefinitionRow\";\r\nimport {Link} from \"@mui/material\";\r\nimport XMLParser from \"react-xml-parser\";\r\n\r\n/* global i2b2 */\r\n\r\nexport const DefineTable = (props) => {\r\n    const dispatch = useDispatch();\r\n    const isI2b2LibLoaded  = useSelector((state) => state.isI2b2LibLoaded);\r\n    const { rows } = useSelector((state) => state.tableDef);\r\n    const [cellModesModel, setCellModesModel] = React.useState({});\r\n\r\n\r\n    const columns = [\r\n        {\r\n            field: 'order',\r\n            headerName: 'order',\r\n            headerClassName: \"header\",\r\n            width: 1,\r\n            sortable: true,\r\n            resizable: false,\r\n            sortingOrder: \"ASC\",\r\n            hideSortIcons: true,\r\n            disableReorder: true\r\n        },\r\n        {\r\n            field: 'name',\r\n            headerName: 'Column Title',\r\n            headerClassName: \"header\",\r\n            flex:1,\r\n            editable: true,\r\n            sortable: false,\r\n            resizable: true,\r\n            disableColumnSorting: true,\r\n            disableColumnMenu: false,\r\n            renderCell: ({row}) =>  (\r\n                <Tooltip title={row.sdxData.renderData?.moreDescriptMinor ? row.sdxData.renderData.moreDescriptMinor : \"This column was originally called \\\"\"+ row.id+\"\\\"\"} >\r\n                    { row.name.length ? <span className=\"tabledef-cell-trucate\">{row.name}</span>  : <div className=\"tabledef-cell-trucate\">&nbsp;</div> }\r\n                </Tooltip>\r\n            ),\r\n            renderEditCell: (params) => (\r\n                <GridEditInputCell\r\n                    {...params}\r\n                    inputProps={{ maxLength: 255 }}\r\n                />\r\n            ),\r\n            valueSetter: (value, row) => {\r\n                dispatch(handleRowName({id: row.id, value: value}));\r\n                return { ...row };\r\n            },\r\n        },\r\n        {\r\n            field: \"constraints\",\r\n            headerName: 'Constraints',\r\n            headerClassName: \"header\",\r\n            disableColumnSorting: true,\r\n            disableColumnMenu: true,\r\n            resizable: true,\r\n            editable: false,\r\n            sortable: false,\r\n            display: \"flex\",\r\n            flex:0.5,\r\n            renderCell: (cellValues) => {\r\n                if (!cellValues.row.required) {\r\n                    let ret;\r\n                    let txtLab;\r\n                    let txtMouseover;\r\n                    let labData = cellValues.row.sdxData.LabValues;\r\n                    if (labData !== undefined && labData.ValueType !== undefined) {\r\n                        switch (labData.ValueType) {\r\n                            case undefined:\r\n                                break;\r\n                            case \"TEXT\":\r\n                                if (labData.Value.length > 1) {\r\n                                    txtLab = \"(\" + labData.Value.length + \" values)\";\r\n                                    txtMouseover = labData.Value.join('\\n');\r\n                                } else {\r\n                                    txtLab = labData.Value[0];\r\n                                    txtMouseover = txtLab;\r\n                                }\r\n                                break;\r\n                            case \"FLAG\":\r\n                                txtLab = \"Flag = \\\"\" + labData.ValueFlag + \"\\\"\";\r\n                                txtMouseover = txtLab;\r\n                                break;\r\n                            default:\r\n                                switch(labData.ValueOperator) {\r\n                                    case \"BETWEEN\":\r\n                                        txtLab = \"Between \" + labData.ValueLow + \" - \" + labData.ValueHigh;\r\n                                        break;\r\n                                    case \"GT\":\r\n                                        txtLab = \">\" + labData.Value;\r\n                                        break;\r\n                                    case \"GE\":\r\n                                        txtLab = \"≥\" + labData.Value;\r\n                                        break;\r\n                                    case \"LE\":\r\n                                        txtLab = \"≤\" + labData.Value;\r\n                                        break;\r\n                                    case \"LT\":\r\n                                        txtLab = \"<\" + labData.Value;\r\n                                        break;\r\n                                    case \"EQ\":\r\n                                        txtLab = \"=\" + labData.Value;\r\n                                        break;\r\n                                    default:\r\n                                        txtLab = \"UNKNOWN\";\r\n                                }\r\n                                // add units\r\n                                if (typeof labData.ValueUnit === \"string\" && labData.ValueUnit !== \"\") txtLab = txtLab + \" \" + labData.ValueUnit;\r\n                                txtMouseover = txtLab;\r\n                                break;\r\n                        }\r\n\r\n                        return <Link href={`#${cellValues.row.id}`} title={txtMouseover} onClick={(event) => {\r\n                            handleSetValueClick(event, cellValues);\r\n                        }}>{txtLab}</Link>;\r\n                    } else {\r\n                        return <Link href={`#${cellValues.row.id}`} onClick={(event) => {\r\n                            handleSetValueClick(event, cellValues);\r\n                        }}>Set Value</Link>;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            field: 'dataOption',\r\n            headerName: 'Aggregation Method',\r\n            headerClassName: \"header\",\r\n            minWidth: 275,\r\n            resizable: false,\r\n            disableColumnMenu: true,\r\n            disableReorder: true,\r\n            display: \"flex\",\r\n            hideSortIcons: true,\r\n            disableColumnSorting: true,\r\n            sortable: false,\r\n            editable: true,\r\n            type: \"singleSelect\",\r\n            valueOptions: ({ row }) => {\r\n                let valueOptions = [];\r\n                if (!row.required) {\r\n                    valueOptions.push(\r\n                        { value: \"Exists\", label: \"Existence (Yes/No)\" },\r\n                        { value: \"NumConcepts\", label: \"Count: Number of Concepts\"},\r\n                        { value: \"NumDates\", label: \"Count: Number of Dates\" },\r\n                        { value: \"NumEncounters\", label: \"Count: Number of Encounters\" },\r\n                        { value: \"NumFacts\", label: \"Count: Number of Facts\" },\r\n                        { value: \"NumProviders\", label: \"Count: Number of Providers\" },\r\n                        { value: \"MinDate\", label: \"Date: First Date\" },\r\n                        { value: \"MaxDate\", label: \"Date: Last Date\" },\r\n                    );\r\n                }else{\r\n                    valueOptions.push ({ value: \"Value\", label: \"Value\" });\r\n                }\r\n\r\n                if(row.dataType) {\r\n                    if (row.dataType === DATATYPE.INTEGER ||\r\n                        row.dataType === DATATYPE.FLOAT ||\r\n                        row.dataType === DATATYPE.POSINTEGER ||\r\n                        row.dataType === DATATYPE.POSFLOAT) {\r\n                        valueOptions.push(\r\n                            { value: \"MinValue\", label: \"Calc: Minimum Value\" },\r\n                            { value: \"MaxValue\", label: \"Calc: Maximum Value\" },\r\n                            { value: \"AvgValue\", label: \"Calc: Average Value\" },\r\n                            { value: \"MedianValue\", label: \"Calc: Median Value\" },\r\n                            {value: \"FirstValue\", label: \"Calc: First Value\"},\r\n                            {value: \"LastValue\", label: \"Calc: Last Value\"},\r\n                            {value: \"NumValues\", label: \"Count: Number of Values\"}\r\n                        );\r\n                    }else{\r\n                        valueOptions.push(\r\n                            { value: \"FirstValueEnum\", label: \"Calc: First Value\" },\r\n                            { value: \"LastValueEnum\", label: \"Calc: Last Value\" },\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return valueOptions;\r\n            },\r\n            valueSetter: (value, row) => {\r\n                dispatch(handleRowAggregation({id: row.id, value: value}));\r\n                return { ...row };\r\n            }\r\n        },\r\n        {\r\n            field: \"included\",\r\n            headerName: \"Actions\",\r\n            headerClassName: \"header\",\r\n            width: 70,\r\n            editable: false,\r\n            sortable: false,\r\n            type: \"boolean\",\r\n            resizable: false,\r\n            disableColumnMenu: true,\r\n            disableReorder: true,\r\n            hideSortIcons: true,\r\n            disableColumnSorting: true,\r\n            headerAlign: \"center\",\r\n            renderCell: ({row}) => {\r\n                if (row.required) {\r\n                    if (row.locked) {\r\n                        return (\r\n                            <GridActionsCellItem\r\n                                icon={\r\n                                    <Tooltip title=\"Column is Locked\">\r\n                                        <LockIcon />\r\n                                    </Tooltip>\r\n                                }\r\n                                label=\"Locked Column\"\r\n                            />);\r\n                    } else {\r\n                        if (row.display) {\r\n                            return (\r\n                                <GridActionsCellItem\r\n                                    icon={\r\n                                        <Tooltip title=\"Column is Exported\">\r\n                                            <CheckIcon />\r\n                                        </Tooltip>\r\n                                    }\r\n                                    label=\"Column is Exported\"\r\n                                    onClick={(e) => {\r\n                                        dispatch(handleRowExported({row: row, exported:false}));\r\n                                    }}\r\n                                />\r\n                            );\r\n                        } else {\r\n                            return (\r\n                                <GridActionsCellItem\r\n                                    icon={\r\n                                        <Tooltip title=\"Column is not Exported\">\r\n                                            <CheckBoxOutlineBlankIcon />\r\n                                        </Tooltip>\r\n                                    }\r\n                                    label=\"Column is not Exported\"\r\n                                    onClick={(e) => {\r\n                                        dispatch(handleRowExported({row: row, exported:true}));\r\n                                    }}\r\n                                />\r\n                            );\r\n                        }\r\n                    }\r\n                } else {\r\n                    return (\r\n                        <GridActionsCellItem\r\n                            icon={\r\n                                <Tooltip title=\"Delete Column\">\r\n                                    <DeleteIcon />\r\n                                </Tooltip>\r\n                            }\r\n                            label=\"Delete Column\"\r\n                            onClick={(e) => {\r\n                                dispatch(handleRowDelete({row: row}));\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    ];\r\n\r\n    const displayLabValues = (rowId, sdx) => {\r\n        i2b2.authorizedTunnel.function[\"i2b2.CRC.view.QT.labValue.getAndShowLabValues\"](sdx).then((res) => {\r\n            dispatch(handleRowSdx({\r\n                id: rowId, sdx: res\r\n            }));\r\n        });\r\n    }\r\n    const  handleSetValueClick = (event, cellValues) => {\r\n        displayLabValues(cellValues.row.id, cellValues.row.sdxData);\r\n    };\r\n\r\n    const conceptDropHandler = (sdx, ev) => {\r\n        let rowNum = null;\r\n        // see if drop is on a row\r\n        let row = ev.target.closest(\".MuiDataGrid-row\");\r\n        if (row === null) {\r\n            // see if the drop was on the header\r\n            row = ev.target.closest(\".MuiDataGrid-columnHeaders\");\r\n            if (row !== null) {\r\n                // insert the drop at the very top (this is in-band signaling)\r\n                rowNum = Number.NEGATIVE_INFINITY;\r\n            } else {\r\n                // insert to drop at the very bottom (this is in-band signaling)\r\n                rowNum = Number.POSITIVE_INFINITY;\r\n            }\r\n        } else {\r\n            // insert the drop below the currently set row\r\n            rowNum = parseInt(row.dataset.rowindex) + 1;\r\n        }\r\n\r\n        // clean/retrieve sdx info\r\n        delete sdx.renderData.tvNodeState;\r\n        let requestData = {\r\n            ont_max_records: 'max=\"1\"',\r\n            ont_synonym_records: false,\r\n            ont_hidden_records: false,\r\n            concept_key_value: sdx.sdxInfo.sdxKeyValue\r\n        }\r\n        i2b2.ajax.ONT.GetTermInfo(requestData)\r\n            .then((xmlString) => {\r\n                // get and populate metadata info\r\n                let xmlparser = new XMLParser();\r\n                let xmlDoc = xmlparser.parseFromString(xmlString);\r\n                let concepts = xmlDoc.getElementsByTagName('ns6:concepts');\r\n                if (concepts.length !== 0) sdx.origData.xmlOrig =  xmlparser.toString(concepts[0]);\r\n                // metadata\r\n                let valueMetadataList = xmlDoc.getElementsByTagName('metadataxml');\r\n                if (valueMetadataList.length !== 0 ) {\r\n                    let metadata = valueMetadataList[0];\r\n                    sdx.origData.metadata = xmlparser.toString(metadata);\r\n                    let dataType = metadata.getElementsByTagName('DataType');\r\n                    if (dataType.length !== 0) sdx.origData.dataType = DATATYPE[dataType[0].value.toUpperCase()];\r\n                }\r\n            }).finally(() => {\r\n                // insert row\r\n                const rowId = generateTableDefRowId(sdx.sdxInfo.sdxKeyValue);\r\n                dispatch(handleRowInsert({rowIndex: rowNum, rowId: rowId, sdx: sdx}));\r\n                if (sdx.origData.metadata !== undefined) displayLabValues(rowId, sdx);\r\n        });\r\n    };\r\n\r\n    const i2b2LibLoaded = () => {\r\n        dispatch(updateI2b2LibLoaded());\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isI2b2LibLoaded && i2b2.sdx !== undefined) {\r\n            i2b2.sdx.AttachType(\"dropTrgt\", \"CONCPT\");\r\n            i2b2.sdx.setHandlerCustom(\"dropTrgt\", \"CONCPT\", \"DropHandler\", conceptDropHandler);\r\n        } else {\r\n            window.addEventListener('I2B2_READY', i2b2LibLoaded);\r\n        }\r\n    }, [isI2b2LibLoaded]);\r\n\r\n    const handleCellClick = React.useCallback(\r\n        (params, event) => {\r\n            if (!params.isEditable) return;\r\n            // Ignore portal\r\n            if (event.target.nodeType === 1 && !event.currentTarget.contains(event.target)) return;\r\n\r\n            if (params !== undefined) {\r\n                if (params.field === \"dataOption\" && params.row.required === true) {\r\n                    event.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n            setCellModesModel((prevModel) => {\r\n                let ret = {\r\n                    ...Object.keys(prevModel).reduce(\r\n                        (acc, id) => ({\r\n                            ...acc,\r\n                            [id]: Object.keys(prevModel[id]).reduce(\r\n                                (acc2, field) => ({\r\n                                    ...acc2,\r\n                                    [field]: {mode: GridCellModes.View},\r\n                                }),\r\n                                {},\r\n                            ),\r\n                        }),\r\n                        {},\r\n                    ),\r\n                    // Revert the mode of the other cells from other rows\r\n                    ...Object.keys(prevModel).reduce(\r\n                        (acc, id) => ({\r\n                            ...acc,\r\n                            [id]: Object.keys(prevModel[id]).reduce(\r\n                                (acc2, field) => ({\r\n                                    ...acc2,\r\n                                    [field]: {mode: GridCellModes.View},\r\n                                }),\r\n                                {},\r\n                            ),\r\n                        }),\r\n                        {},\r\n                    )\r\n                };\r\n\r\n                return {\r\n                    ...ret,\r\n                    [params.id]: {\r\n                        // Revert the mode of other cells in the same row\r\n                        ...Object.keys(prevModel[params.id] || {}).reduce(\r\n                            (acc, field) => ({ ...acc, [field]: { mode: GridCellModes.View } }),\r\n                            {},\r\n                        ),\r\n                        [params.field]: { mode: GridCellModes.Edit },\r\n                    },\r\n                };\r\n            });\r\n        },\r\n        [],\r\n    );\r\n\r\n    const handleCellModesModelChange = React.useCallback(\r\n        (newModel) => {\r\n            setCellModesModel(newModel);\r\n        },\r\n        [],\r\n    );\r\n\r\n    const checkEmptyName = (temp) => {\r\n        if (temp.field === \"name\") {\r\n            if (temp.value.trim().length === 0) {\r\n                return 'missing';\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"DefineTable\"} >\r\n\r\n            <div id=\"dropTrgt\">\r\n                <p>Drag a concept onto the grid to add it to the list</p>\r\n                <DataGrid\r\n                    style={{background:\"white\"}}\r\n                    className={\"DefineTableGrid\"}\r\n                    rows={rows}\r\n                    columns={columns}\r\n                    showCellVerticalBorder={true}\r\n                    hideFooterSelectedRowCount={true}\r\n                    columnVisibilityModel={{order: false}}\r\n                    disableColumnSelector={true}\r\n                    cellModesModel={cellModesModel}  // causes errors when deleting a row\r\n                    onCellModesModelChange={handleCellModesModelChange} // causes errors when deleting a row\r\n                    onCellClick={handleCellClick}\r\n                    onCellDoubleClick={handleCellClick}\r\n                    initialState={{\r\n                        sorting: {\r\n                            sortModel: [{field:'order',sort:'asc'}]\r\n                        }\r\n                    }}\r\n                    autoHeight={true}\r\n                    hideFooter={true}\r\n                    isCellEditable={({row, colDef}) => (!row.locked && !(row.required && colDef.field === \"dataOption\"))}\r\n                    getCellClassName={checkEmptyName}\r\n                />\r\n            </div>\r\n\r\n            <Stack\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justifyContent=\"right\"\r\n                alignItems=\"center\"\r\n                className={\"DefineTableActions\"}\r\n            >\r\n                <Button variant=\"contained\" onClick={()=>props.tabChanger(null,1)}>Preview Table</Button>\r\n                <Button variant=\"contained\" onClick={()=>props.tabChanger(null,2)}>Select Participants for Table</Button>\r\n            </Stack>\r\n        </div>\r\n    );\r\n\r\n\r\n}","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CustomTabPanel = ({ children, value, index, ...other }) => {\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nCustomTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};","import { createSlice } from '@reduxjs/toolkit'\r\nimport {MAKE_REQUEST_DETAILS} from \"../actions\";\r\nimport { defaultState } from '../defaultState';\r\nimport {StatusInfo} from \"../models\";\r\n\r\nexport const makeRequestSlice = createSlice({\r\n    name: MAKE_REQUEST_DETAILS,\r\n    initialState: defaultState.makeRequestDetails,\r\n    reducers: {\r\n        updateRequestPatientSet: (state, { payload: sdx }) => {\r\n            state.patientSet.title = sdx.renderData.title;\r\n            state.patientSet.sdx = sdx;\r\n        },\r\n        updateRequestComments: (state, { payload: comments }) => {\r\n            state.comments = comments;\r\n        },\r\n        updateRequestEmail: (state, { payload: email }) => {\r\n            state.email = email;\r\n        },\r\n        makeRequest: state => {\r\n            state.isSubmitting = true;\r\n            state.statusInfo = StatusInfo();\r\n        },\r\n        makeRequestSuccess: (state) => {\r\n            state.isSubmitting = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"SUCCESS\"\r\n            });\r\n        },\r\n        makeRequestError: (state, { payload: errorMessage }) => {\r\n            state.isSubmitting = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"FAIL\",\r\n                errorMessage: errorMessage\r\n            });\r\n        },\r\n        makeRequestStatusConfirmed: (state) => {\r\n            state.statusInfo = StatusInfo();\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    makeRequest,\r\n    makeRequestSuccess,\r\n    makeRequestError,\r\n    makeRequestStatusConfirmed,\r\n    updateRequestPatientSet,\r\n    updateRequestEmail,\r\n    updateRequestComments\r\n} = makeRequestSlice.actions\r\n\r\nexport default makeRequestSlice.reducer","import React, {useState, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport \"../../css/modals.scss\";\r\n\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport {\r\n    Backdrop,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField\r\n} from \"@mui/material\";\r\nimport \"./MakeRequest.scss\";\r\nimport {\r\n    makeRequest,\r\n    makeRequestStatusConfirmed,\r\n    updateRequestComments,\r\n    updateRequestEmail,\r\n    updateRequestPatientSet\r\n} from \"../../reducers/makeRequestSlice\";\r\n\r\n/* global i2b2 */\r\nexport const MakeRequest = () => {\r\n    const dispatch = useDispatch();\r\n    const makeRequestDetails = useSelector((state) => state.makeRequestDetails);\r\n    const tableDef = useSelector((state) => state.tableDef);\r\n    const [isEmailNotValid, setIsEmailNotValid] = useState(false);\r\n    const [emailNotValidError, setEmailNotValidError] = useState(\"\");\r\n    const [isPatientSetNotValid, setIsPatientSetNotValid] = useState(false);\r\n    const defaultPatientSetHelperText = \"Drag and drop a patient set here\";\r\n    const [patientSetNotValidError, setPatientSetNotValidError] = useState(defaultPatientSetHelperText);\r\n\r\n    const updateEmail = (value) => {\r\n        dispatch(updateRequestEmail(value));\r\n    }\r\n\r\n    const updateComments = (value) => {\r\n        dispatch(updateRequestComments(value));\r\n    }\r\n\r\n    const handleMakeRequest = () => {\r\n        if(isValidRequest()) {\r\n            dispatch(makeRequest({\r\n                makeRequestDetails: makeRequestDetails,\r\n                tableDefRows: tableDef.rows\r\n            }));\r\n        }\r\n    }\r\n\r\n    const isValidRequest = () => {\r\n        let isValid = true;\r\n\r\n        if (!makeRequestDetails.patientSet || makeRequestDetails.patientSet.title.length === 0) {\r\n            setIsPatientSetNotValid(true);\r\n            setPatientSetNotValidError(\"Patient Set is required\");\r\n            isValid = false;\r\n        } else {\r\n            setIsPatientSetNotValid(false);\r\n            setPatientSetNotValidError(defaultPatientSetHelperText);\r\n        }\r\n\r\n        const emailRegex = /\\S+@\\S+\\.\\S+/;\r\n        if ((makeRequestDetails.email && makeRequestDetails.email.length > 0) && emailRegex.test(makeRequestDetails.email)) {\r\n            setIsEmailNotValid(false);\r\n            setEmailNotValidError(\"\");\r\n        } else {\r\n            setIsEmailNotValid(true);\r\n            setEmailNotValidError(\"Enter a valid email\");\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    const handleConfirmStatus = () => {\r\n        dispatch(makeRequestStatusConfirmed());\r\n    };\r\n\r\n    const handlePatientSetDrop = (sdx,ev) => {\r\n        dispatch(updateRequestPatientSet(sdx));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(i2b2) {\r\n            i2b2.sdx.AttachType(\"makeRequestPatientSet\", \"PRS\");\r\n            i2b2.sdx.setHandlerCustom(\"makeRequestPatientSet\", \"PRS\", \"DropHandler\", handlePatientSetDrop);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <Stack\r\n            className={\"MakeRequest\"}\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"flex-start\"\r\n            spacing={3}\r\n            useFlexGap\r\n        >\r\n            <TextField\r\n                id=\"makeRequestPatientSet\"\r\n                required\r\n                className=\"inputField\"\r\n                label=\"Patient Set\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                slotProps={{ input: { readOnly: true } }}\r\n                error={isPatientSetNotValid}\r\n                helperText={patientSetNotValidError}\r\n                value={makeRequestDetails.patientSet.title}\r\n                InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n                required\r\n                disabled={true}\r\n                className=\"inputField\"\r\n                label=\"Table\"\r\n                defaultValue={\"Table specifications from Define Table tab\"}\r\n                variant=\"standard\"\r\n                fullWidth\r\n                InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n                required\r\n                className=\"inputField\"\r\n                label=\"Email\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                value={makeRequestDetails.email}\r\n                onChange={(event) => updateEmail(event.target.value)}\r\n                error={isEmailNotValid}\r\n                helperText={emailNotValidError}\r\n                InputLabelProps={{ shrink: true }}\r\n            />\r\n            <TextField\r\n                className=\"inputField comments\"\r\n                label=\"Comments\"\r\n                fullWidth\r\n                maxRows={5}\r\n                minRows={3}\r\n                inputProps={{ maxLength: 1000 }}\r\n                multiline\r\n                value={makeRequestDetails.comments}\r\n                helperText={\"Max: 1,000 characters\"}\r\n                onChange={(event) => updateComments(event.target.value)}\r\n                InputLabelProps={{ shrink: true }}\r\n            />\r\n            <div className={\"MakeRequestSubmitMain\"}>\r\n                <Button className={\"MakeRequestSubmit\"} onClick={handleMakeRequest} variant=\"contained\" >Submit Request for Data Export</Button>\r\n            </div>\r\n            <Backdrop\r\n                sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\r\n                open={makeRequestDetails.isSubmitting}\r\n            >\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n            <Dialog\r\n                open={makeRequestDetails.statusInfo.status === \"SUCCESS\"}\r\n                onClose={handleConfirmStatus}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {\"Data Request\"}\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                       A data export request has been submitted.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\" autoFocus onClick={handleConfirmStatus}>\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Stack>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {DataGrid} from \"@mui/x-data-grid\";\r\nimport \"./PreviewTable.scss\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from \"@mui/material/Button\";\r\n\r\nexport const PreviewTable = (props) => {\r\n    const tableDefRows = useSelector((state) => state.tableDef.rows);\r\n    const [columns, setColumns] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n\r\n    const updateRows = (columns) => {\r\n\r\n        let newRows = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            let row = {\r\n                id: i\r\n            };\r\n            for (const column of columns) {\r\n                let name = column.id;\r\n                let aggType= column.aggType;\r\n\r\n                row[name] = \"[Value]\";\r\n\r\n                switch (name) {\r\n                    case 'patient_number':\r\n                    case 'subject_id':\r\n                        row[name] = \"RA15432-0000\" + i\r\n                        break;\r\n                    case 'gender':\r\n                        row[name] = ['M','F'].map((a) => ({ sort: Math.random(), value: a }))\r\n                        .sort((a, b) => a.sort - b.sort)\r\n                        .map((a) => a.value)[0];\r\n                        break;\r\n                    case 'age':\r\n                        row[name] = Math.floor(Math.random() * 81) + 20;\r\n                        break;\r\n                    case 'vital_status':\r\n                        row[name] = \"N\";\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                switch (aggType) {\r\n                    case 'Exists':\r\n                        row[name] = [\"Yes\", \"No\"].map((a) => ({ sort: Math.random(), value: a }))\r\n                            .sort((a, b) => a.sort - b.sort)\r\n                            .map((a) => a.value)[0];\r\n                        break;\r\n                    case \"NumConcepts\":\r\n                    case \"NumDates\":\r\n                    case \"NumEncounters\":\r\n                    case \"NumFacts\":\r\n                    case \"NumProviders\":\r\n                    case \"NumValues\":\r\n                        row[name] = Math.floor(Math.random() * 101);\r\n                        break;\r\n                    case \"MinDate\":\r\n                    case \"MaxDate\":\r\n                        const time = Math.floor(Math.random() * 1577836801) + 1704067200;\r\n                        row[name] = (new Date(time)).toLocaleString();\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            newRows.push(row);\r\n        }\r\n        setRows(newRows);\r\n    }\r\n\r\n    useEffect( ()  =>{\r\n        let columnNames = [];\r\n        setColumns(tableDefRows.filter(p => p.display).map(row => {\r\n            columnNames.push({id:row.id, name: row.name, aggType: row.dataOption});\r\n            return {\r\n                field: row.id,\r\n                headerName: row.name,\r\n                headerClassName: \"header\",\r\n                sortable: false,\r\n                hideSortIcons: true,\r\n                disableReorder: true,\r\n                flex: 1,\r\n                minWidth: 150\r\n            }\r\n        }));\r\n\r\n        updateRows(columnNames);\r\n    },[tableDefRows]);\r\n\r\n    return (\r\n        <Stack\r\n            className={\"PreviewTable\"}\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={3}\r\n            useFlexGap\r\n        >\r\n            <Typography variant=\"subtitle2\" gutterBottom>\r\n            This is an example view of fake data in the format of the table you have defined for export.  This is not real data.\r\n            </Typography>\r\n\r\n            <DataGrid\r\n                className={\"PreviewTableGrid\"}\r\n                style={{background:\"white\"}}\r\n                rows={rows}\r\n                columns={columns}\r\n                showCellVerticalBorder={true}\r\n                hideFooterSelectedRowCount={true}\r\n                columnVisibilityModel={{order: false}}\r\n                disableColumnSelector={true}\r\n                disableColumnMenu={true}\r\n                initialState={{\r\n                    sorting: {\r\n                        sortModel: [{field:'order',sort:'asc'}]\r\n                    }\r\n                }}\r\n                autoHeight={true}\r\n                hideFooter={true}\r\n\r\n            />\r\n\r\n            <Stack\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justifyContent=\"right\"\r\n                alignItems=\"center\"\r\n                className={\"PreviewTableActions\"}\r\n            >\r\n                <Button variant=\"contained\" onClick={()=>props.tabChanger(null,2)}>Select Participants for Table</Button>\r\n            </Stack>\r\n        </Stack>\r\n    )\r\n}","import React from \"react\";\r\n\r\nimport {DataGrid} from \"@mui/x-data-grid\";\r\n\r\nexport const TableListing = ({id, rows, canRename, onSelect, onSelectionModelChange, selectionModel}) => {\r\n    const columns = [\r\n        {\r\n            field: 'title',\r\n            headerName: 'Table Definition Name',\r\n            minWidth: 438,\r\n            flex:1,\r\n            sortable: true,\r\n            editable: canRename,\r\n            disableReorder: true,\r\n            type: 'string',\r\n        }, {\r\n            field: 'create_date',\r\n            headerName: 'Created',\r\n            width: 99,\r\n            sortable: true,\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            disableReorder: true,\r\n            type: 'date'\r\n        }, {\r\n            field: 'edit_date',\r\n            headerName: 'Edited',\r\n            width: 99,\r\n            sortable: true,\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            disableReorder: true,\r\n            type: 'date'\r\n        }, {\r\n            field: 'column_count',\r\n            headerName: 'Columns',\r\n            width: 97,\r\n            sortable: true,\r\n            headerAlign: 'center',\r\n            align: 'center',\r\n            disableReorder: true,\r\n            type: 'number'\r\n        }\r\n    ];\r\n\r\n    function handleOnSelectionModelChange(selection, {api} ) {\r\n        if (selection.length > 0) onSelect(api.getRow(selection[0]));\r\n\r\n        if (onSelectionModelChange !== undefined) {\r\n            onSelectionModelChange(selection);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div id={id} style={{height: 400}} >\r\n            <DataGrid\r\n                height={280}\r\n                columnHeaderHeight={40}\r\n                style={{background:\"white\"}}\r\n                columns={columns}\r\n                rows={rows}\r\n                showCellVerticalBorder={true}\r\n                density={'compact'}\r\n                disableColumnResize={true}\r\n                onRowSelectionModelChange = {handleOnSelectionModelChange}\r\n                rowSelectionModel = {selectionModel}\r\n                autoPageSize\r\n            />\r\n        </div>\r\n    )\r\n}","import { createSlice } from '@reduxjs/toolkit'\r\nimport { TABLE_LISTING } from \"../actions\";\r\nimport { defaultState } from '../defaultState';\r\nimport {StatusInfo, TableListing} from \"../models\";\r\n\r\nexport const listTablesSlice = createSlice({\r\n    name: TABLE_LISTING,\r\n    initialState: defaultState.tableListing,\r\n    reducers: {\r\n        listTables: state => {\r\n            state = TableListing({\r\n                isFetching: false\r\n            })\r\n        },\r\n        listTablesSuccess: (state, { payload: tableDefs }) => {\r\n            state.sharedRows = tableDefs.sharedRows;\r\n            state.userRows = tableDefs.userRows;\r\n            state.isFetching = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"SUCCESS\"\r\n            });\r\n        },\r\n        listTablesError: (state, { payload: errorMessage }) => {\r\n            state.isFetching = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"FAIL\",\r\n                errorMessage: errorMessage\r\n            });\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    listTables,\r\n    listTablesSuccess,\r\n    listTablesError\r\n} = listTablesSlice.actions\r\n\r\nexport default listTablesSlice.reducer","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport const TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport \"../../css/modals.scss\";\r\n\r\nimport { TableListing } from \"../TableListing\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { listTables } from \"../../reducers/listTablesSlice\";\r\nimport { TabPanel } from \"../TabPanel\";\r\nimport {loadTable} from \"../../reducers/loadTableSlice\";\r\nimport {Dialog, DialogActions, DialogContent, DialogTitle, DialogContentText} from \"@mui/material\";\r\n\r\nexport const LoadTableModal = ({open, handleClose, handleSetScreen}) => {\r\n    const dispatch = useDispatch();\r\n    const { sharedRows, userRows } = useSelector((state) => state.tableListing);\r\n    const [tab, setTab] = React.useState(0);\r\n    const [selectedTable, setSelectedTable] = useState(null);\r\n    const handleChangeTab = (event, newValue) => { setTab(newValue); };\r\n\r\n    const addtlProps = (index) => {\r\n        return {\r\n            id: `vertical-tab-${index}`,\r\n            'aria-controls': `vertical-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    const handleLoadTable = () =>{\r\n        handleClose();\r\n        dispatch(loadTable(selectedTable));\r\n        handleSetScreen(0);\r\n    }\r\n    useEffect(() => {\r\n        if (open) {\r\n            dispatch(listTables());\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Dialog\r\n            className={\"ModalDialog\"}\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-title\"\r\n            aria-describedby=\"modal-description\"\r\n            fullWidth={true}\r\n            maxWidth={'xl'}\r\n        >\r\n            <DialogTitle> Load Table Definition</DialogTitle>\r\n            <DialogContent className={\"ModalDialogContent\"}>\r\n                <DialogContentText className={\"ModalDialogContentText\"}>\r\n                    <Typography id=\"modal-description\">\r\n                        Load an existing table definition from below. Loading a definition will overwrite any unsaved changes in the definition editor.\r\n                    </Typography>\r\n                </DialogContentText>\r\n                <Box\r\n                    className = {\"modalDefListBox\"}\r\n                    sx={{ flexGrow: 1, display: 'flex', boxShadow: 2 }}\r\n                >\r\n                    <Tabs\r\n                        orientation=\"vertical\"\r\n                        value={tab}\r\n                        onChange={handleChangeTab}\r\n                        aria-label=\"Table Definition Folders\"\r\n                        sx={{ borderRight: 1, borderColor: 'divider' }}\r\n                    >\r\n                        <Tab label=\"Shared Tables\" {...addtlProps(0)} />\r\n                        <Tab label=\"My Tables\" {...addtlProps(1)} />\r\n                    </Tabs>\r\n                    <TabPanel\r\n                        value={tab}\r\n                        index={0}\r\n                        className={'modalTabPanel'}\r\n                    >\r\n                        <TableListing id={\"loadModalDefTableGlobal\"} rows={sharedRows} canRename={false} onSelect={setSelectedTable}/>\r\n                    </TabPanel>\r\n                    <TabPanel\r\n                        value={tab}\r\n                        index={1}\r\n                        className={'modalTabPanel'}\r\n                    >\r\n                        <TableListing id={\"loadModalDefTableLocal\"} rows={userRows} canRename={false} onSelect={setSelectedTable}/>\r\n                    </TabPanel>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"outlined\" onClick={handleClose}>Cancel</Button>\r\n                <Button variant=\"contained\" onClick={handleLoadTable} disable={!selectedTable}>Load</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport {SAVE_TABLE} from \"../actions\";\r\nimport { defaultState } from '../defaultState';\r\nimport {StatusInfo} from \"../models\";\r\n\r\nexport const saveTableSlice = createSlice({\r\n    name: SAVE_TABLE,\r\n    initialState: defaultState.saveTable,\r\n    reducers: {\r\n        saveTable: state => {\r\n            state.isSaving = true;\r\n            state.statusInfo = StatusInfo();\r\n        },\r\n        saveTableSuccess: (state, { payload: table }) => {\r\n            state.isSaving = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"SUCCESS\"\r\n            });\r\n        },\r\n        saveTableError: (state, { payload: errorMessage }) => {\r\n            state.isSaving = false;\r\n            state.statusInfo = StatusInfo({\r\n                status: \"FAIL\",\r\n                errorMessage: errorMessage\r\n            });\r\n        },\r\n        saveStatusConfirmed: (state) => {\r\n            state.statusInfo = StatusInfo();\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    saveTable,\r\n    saveTableSuccess,\r\n    saveTableError,\r\n    saveStatusConfirmed\r\n} = saveTableSlice.actions\r\n\r\nexport default saveTableSlice.reducer","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from '@mui/material/TextField';\r\nimport \"../../css/modals.scss\";\r\nimport { TableListing } from \"../TableListing\";\r\nimport { listTables } from \"../../reducers/listTablesSlice\";\r\nimport { TabPanel } from \"../TabPanel\";\r\nimport {saveStatusConfirmed, saveTable} from \"../../reducers/saveTableSlice\";\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@mui/material\";\r\n\r\n\r\n\r\nexport const SaveTableModal = ({open, handleClose}) => {\r\n    const [selectedTableDef, setSelectedTableDef] = React.useState({});\r\n    const { userRows } = useSelector((state) => state.tableListing);\r\n    const saveTableInfo = useSelector((state) => state.saveTable);\r\n    const tableDefRows = useSelector((state) => state.tableDef.rows);\r\n    const [selectedRows, setSelectedRows] = React.useState([]);\r\n    const [enteredTitle, setEnteredTitle] = React.useState(\"My-Table-Definition\");\r\n    const [showOverwrite, setShowOverwrite] = React.useState(false);\r\n    const [isNameInvalid, setIsNameInvalid] = React.useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addtlProps = (index)  =>{\r\n        return {\r\n            id: `vertical-tab-${index}`,\r\n            'aria-controls': `vertical-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    const onRowSelect = (row) => {\r\n        setSelectedTableDef({id: row.id, title: row.title});\r\n        setSelectedRows(row.id);\r\n        setEnteredTitle(row.title);\r\n    }\r\n\r\n    const selectIfNameExists = (title) =>{\r\n        const matchedRows = userRows.filter(srow => srow.title?.toUpperCase() === title.toUpperCase());\r\n\r\n        setSelectedRows(matchedRows.map(srow => srow.id));\r\n        setEnteredTitle(title);\r\n\r\n        if(matchedRows.length >0) {\r\n            setSelectedTableDef({title: matchedRows[0].title, id: matchedRows[0].id});\r\n        }else{\r\n            setSelectedTableDef({title: title});\r\n        }\r\n    }\r\n\r\n    const onNameChange = (e) => {\r\n        const title = e.target.value;\r\n\r\n        selectIfNameExists(title);\r\n\r\n        if(title?.length > 0) {\r\n            setIsNameInvalid(false);\r\n        }else{\r\n            setIsNameInvalid(true);\r\n        }\r\n    }\r\n\r\n    const onSave = (selectedRows) =>{\r\n        if (selectedRows.length === 0) {\r\n            doSave();\r\n        } else {\r\n            setShowOverwrite(true);\r\n        }\r\n    }\r\n\r\n    const doSave = () =>{\r\n        dispatch(saveTable({\r\n            tableId: selectedTableDef.id,\r\n            tableTitle: selectedTableDef.title,\r\n            tableDefRows: tableDefRows\r\n        }))\r\n        setShowOverwrite(false);\r\n        handleClose();\r\n    }\r\n\r\n    const handleConfirmStatus = () => {\r\n        dispatch(saveStatusConfirmed());\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            dispatch(listTables());\r\n        }\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n            selectIfNameExists(enteredTitle);\r\n    }, [selectedTableDef]);\r\n    return (\r\n    <div>\r\n        <Dialog\r\n            className={\"ModalDialog\"}\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-title\"\r\n            aria-describedby=\"modal-description\"\r\n            fullWidth={true}\r\n            maxWidth={'xl'}\r\n        >\r\n            <DialogTitle id=\"modal-title\" variant=\"h6\" component=\"h2\">\r\n                Save Table Definition\r\n            </DialogTitle>\r\n            <DialogContent className={\"ModalDialogContent\"}>\r\n                <DialogContentText className={\"ModalDialogContentText\"}>\r\n                    <Typography id=\"modal-description\">\r\n                        Enter a table definition name to save as or select from the list to overwrite.\r\n                    </Typography>\r\n                </DialogContentText>\r\n                <Box\r\n                    className = {\"modalDefListBox\"}\r\n                    sx={{ flexGrow: 1, display: 'flex', boxShadow: 2 }}\r\n                >\r\n                    <Tabs\r\n                        orientation=\"vertical\"\r\n                        value={1}\r\n                        aria-label=\"Table Definition Folders\"\r\n                        sx={{ borderRight: 1, borderColor: 'divider'}}\r\n                    >\r\n                        <Tab label=\"Shared Tables\" {...addtlProps(0)} sx={{textDecoration:\"line-through\"}}/>\r\n                        <Tab label=\"My Tables\" {...addtlProps(1)} />\r\n                    </Tabs>\r\n                    <TabPanel\r\n                        value={1}\r\n                        index={0}\r\n                        className={'modalTabPanel'}\r\n                    >\r\n                    </TabPanel>\r\n                    <TabPanel\r\n                        value={1}\r\n                        index={1}\r\n                        className={'modalTabPanel'}\r\n                        height={260}\r\n                    >\r\n                        <TableListing\r\n                            id={\"saveModalDefTableLocal\"}\r\n                            rows={userRows}\r\n                            canRename={false}\r\n                            onSelect={onRowSelect}\r\n                            selectionModel={selectedRows}\r\n                        />\r\n                    </TabPanel>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions  className={\"ModalDialogActions\"}>\r\n                <TextField\r\n                    required\r\n                    size='small'\r\n                    id=\"TableDefName\"\r\n                    label=\"Save Table Definition As\"\r\n                    value={enteredTitle}\r\n                    onChange={onNameChange}\r\n                    error={isNameInvalid}\r\n                    InputLabelProps={{ shrink: true }}\r\n                    inputProps={{ maxLength: 255 }}\r\n                    sx={{float: \"left\", width:\"60%\", position:\"absolute\", left:32}}\r\n                />\r\n                <Button variant=\"outlined\" onClick={handleClose}>Cancel</Button>\r\n                <Button variant=\"contained\" onClick={()=>onSave(selectedRows)} disabled={isNameInvalid}>Save</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n            open={showOverwrite}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n        >\r\n            <DialogTitle>\r\n                <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                    Overwrite Existing Table\r\n                </Typography>\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                <Box>\r\n                    <Typography id=\"modal-modal-description\" sx={{mt: 2}} align='center'>\r\n                        <div>You are about to overwrite an existing table with the same name.</div>\r\n                        <div>Are you sure you want to do this?</div>\r\n                    </Typography>\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"outlined\" onClick={()=>setShowOverwrite(false)}>No</Button>\r\n                <Button variant=\"contained\" onClick={()=>doSave()}>Yes</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n        <Dialog\r\n            open={saveTableInfo.statusInfo.status === \"SUCCESS\"}\r\n            onClose={handleConfirmStatus}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {\"Data Request\"}\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    Saved table\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" autoFocus onClick={handleConfirmStatus}>\r\n                    Ok\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n);\r\n}\r\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport {DefineTable} from \"../DefineTable\";\r\nimport {CustomTabPanel} from \"./CustomTabPanel\";\r\nimport {MakeRequest} from \"../MakeRequest\";\r\nimport {PreviewTable} from \"../PreviewTable\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloudUploadSharpIcon from '@mui/icons-material/CloudUploadSharp';\r\nimport CloudDownloadSharpIcon from '@mui/icons-material/CloudDownloadSharp';\r\nimport {LoadTableModal} from \"../LoadTableModal\";\r\nimport {SaveTableModal} from \"../SaveTableModal\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nexport const DataExport = () => {\r\n    const [selectedTab, setSelectedTab] = React.useState(0);\r\n    const handleTabChange = (event, newTab) => {\r\n        if (tableDefRows.filter((x)=> x.name.trim().length === 0).length > 0) {\r\n            handleSnackbarOpen('Please fix the errors in the table definition.');\r\n        } else {\r\n            if (newTab === 0) {\r\n                document.querySelector(\"#save-load\").style.display = \"\";\r\n            } else {\r\n                document.querySelector(\"#save-load\").style.display = \"none\";\r\n            }\r\n            setSelectedTab(newTab);\r\n        }\r\n    };\r\n\r\n    const tabProps= (index) => {\r\n        return {\r\n            id: `simple-tab-${index}`,\r\n            'aria-controls': `simple-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n\r\n    const [showLoad, setLoadViz] = React.useState(false);\r\n    const handleLoadOpen = () => setLoadViz(true);\r\n    const handleLoadClose = () => setLoadViz(false);\r\n    const [showSave, setSaveViz] = React.useState(false);\r\n    const handleSaveOpen = () => {\r\n        if (tableDefRows.filter((x)=> x.name.trim().length === 0).length > 0) {\r\n            handleSnackbarOpen('Please fix the errors in the table definition.');\r\n        } else {\r\n            setSaveViz(true);\r\n        }\r\n    }\r\n    const handleSaveClose = () => setSaveViz(false);\r\n\r\n    const tableDefRows = useSelector((state) => state.tableDef.rows);\r\n    const [snackbarShown, setSnackbarViz] = React.useState(false);\r\n    const [snackbarMsg, setSnackbarMsg] = React.useState('');\r\n    const handleSnackbarOpen = (msg) => {\r\n        setSnackbarMsg(msg);\r\n        setSnackbarViz(true);\r\n    }\r\n    const handleSnackbarClose = () => { setSnackbarViz(false); }\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n                open={snackbarShown}\r\n                onClose={handleSnackbarClose}\r\n                autoHideDuration={5000}\r\n                key={'topcenter'}\r\n            >\r\n                <Alert\r\n                    onClose={handleSnackbarClose}\r\n                    severity=\"error\"\r\n                    variant=\"filled\"\r\n                    sx={{ width: '100%' }}\r\n                >\r\n                    {snackbarMsg}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                <AppBar color=\"default\" sx={{ position:'fixed' }}>\r\n                    <Tabs value={selectedTab} onChange={handleTabChange} aria-label=\"basic tabs example\">\r\n                        <Tab label=\"Design Table\" {...tabProps(0)} />\r\n                        <Tab label=\"Preview Table\" {...tabProps(1)} />\r\n                        <Tab label=\"Select Participants for Table\" {...tabProps(2)} />\r\n                    </Tabs>\r\n                    <Stack direction=\"row\" spacing={0} sx={{position:\"fixed\", right:\"1rem\", marginTop:\"-4px\"}} id=\"save-load\">\r\n                        <IconButton aria-label=\"Load Export Definition\" size=\"large\" onClick={handleLoadOpen}  sx={{ \"&:hover\": {color:'rgb(85, 108, 214)'}, transition:\"color\" }}>\r\n                            <CloudDownloadSharpIcon fontSize=\"inherit\" />\r\n                            <span className='icon-text'>Load</span>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"Save Definition\" size=\"large\" onClick={handleSaveOpen} sx={{ \"&:hover\": {color:'rgb(85, 108, 214)', transition:\"color\"} }}>\r\n                            <CloudUploadSharpIcon fontSize=\"inherit\" />\r\n                            <span className='icon-text'>Save</span>\r\n                        </IconButton>\r\n                    </Stack>\r\n                </AppBar>\r\n            </Box>\r\n            <CustomTabPanel value={selectedTab} index={0}>\r\n                <DefineTable tabChanger={handleTabChange}/>\r\n            </CustomTabPanel>\r\n            <CustomTabPanel value={selectedTab} index={1}>\r\n                <PreviewTable tabChanger={handleTabChange}/>\r\n            </CustomTabPanel>\r\n            <CustomTabPanel value={selectedTab} index={2}>\r\n                <MakeRequest/>\r\n            </CustomTabPanel>\r\n\r\n            <LoadTableModal handleClose={handleLoadClose} open={showLoad} handleSetScreen={setSelectedTab} />\r\n            <SaveTableModal handleClose={handleSaveClose} open={showSave} />\r\n        </Box>\r\n    )\r\n};\r\n","import { takeLatest, put} from \"redux-saga/effects\";\r\nimport {loadTableSuccess, loadTableError} from \"../reducers/loadTableSlice\";\r\n\r\nimport {\r\n    LOAD_DATA_TABLE\r\n} from \"../actions\";\r\n/* global i2b2 */\r\n\r\nexport function* doLoadTable(action) {\r\n    let tableListing  = action.payload;\r\n\r\n    try {\r\n        // You can also export the axios call as a function.\r\n\r\n        let formdata = new FormData();\r\n        formdata.append('uid',i2b2.model.user);\r\n        formdata.append('pid',i2b2.model.project);\r\n        formdata.append('sid',i2b2.model.session);\r\n        formdata.append('tid', tableListing.id);\r\n        formdata.append('fid','get_table');\r\n\r\n        const fetchConfig = {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: formdata\r\n        };\r\n\r\n       const response = yield fetch(i2b2.model.endpointUrl, fetchConfig);\r\n        if(response.ok) {\r\n            let data = yield response.json();\r\n            yield put(loadTableSuccess(data));\r\n        }else{\r\n            yield put(loadTableError({error: \"There was an error loading the table definition \" + tableListing.title}));\r\n        }\r\n    } catch (error) {\r\n        yield put(loadTableError({error: \"There was an error loading the table definition \" + tableListing.title}));\r\n    }\r\n}\r\n\r\n\r\nexport function* loadTableSaga() {\r\n    yield takeLatest(LOAD_DATA_TABLE, doLoadTable);\r\n}\r\n","import { takeLatest, put} from \"redux-saga/effects\";\r\nimport {saveTableSuccess, saveTableError} from \"../reducers/saveTableSlice\";\r\n\r\nimport {\r\n    SAVE_DATA_TABLE\r\n} from \"../actions\";\r\n/* global i2b2 */\r\n\r\n\r\nconst transformTableDef = (tableDefRows) => {\r\n    let requiredRows = {};\r\n    let concepts = [];\r\n\r\n    let index=0;\r\n    tableDefRows.forEach(row => {\r\n        if(row.required){\r\n            requiredRows[row.id] = {\r\n                name: row.name,\r\n                display: row.display,\r\n                locked: row.locked\r\n            }\r\n        }\r\n        else{\r\n            concepts.push({\r\n                index: index,\r\n                dataOption: row.dataOption,\r\n                textDisplay: row.name,\r\n                locked: false,\r\n                sdxData: row.sdxData\r\n            });\r\n            index++;\r\n        }\r\n    });\r\n\r\n    const newTdef = {\r\n        required: requiredRows,\r\n        concepts: concepts,\r\n    }\r\n\r\n    return newTdef;\r\n}\r\n\r\nexport function* doSaveTable(action) {\r\n    let { tableId, tableTitle, tableDefRows } = action.payload;\r\n\r\n    try {\r\n        let transformedTableDef = transformTableDef(tableDefRows);\r\n        transformedTableDef.title = tableTitle;\r\n        let formdata = new FormData();\r\n\r\n        formdata.append('uid',i2b2.model.user);\r\n        formdata.append('pid',i2b2.model.project);\r\n        formdata.append('sid',i2b2.model.session);\r\n        formdata.append('tdef', JSON.stringify(transformedTableDef));\r\n        formdata.append('fid','save_table');\r\n\r\n        if(tableId) {\r\n            formdata.append('tid',tableId);\r\n        }\r\n\r\n        const fetchConfig = {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: formdata\r\n        };\r\n\r\n        const response = yield fetch(i2b2.model.endpointUrl, fetchConfig);\r\n        if(response) {\r\n            yield put(saveTableSuccess());\r\n        }\r\n    } catch (error) {\r\n        yield put(saveTableError({errorMessage: \"There was an error saving the data table\"}));\r\n    }\r\n}\r\n\r\n\r\nexport function* saveTableSaga() {\r\n    yield takeLatest(SAVE_DATA_TABLE, doSaveTable);\r\n}\r\n","/* globals i2b2 */\r\n\r\nimport { takeLatest, put} from \"redux-saga/effects\";\r\nimport {listTablesSuccess, listTablesError} from \"../reducers/listTablesSlice\";\r\nimport { DateTime } from \"luxon\";\r\n\r\nimport {\r\n    LIST_TABLES\r\n} from \"../actions\";\r\n\r\nconst parseData = (tableList) => {\r\n    let results = {};\r\n    results.sharedRows = tableList.tables.filter(p => p.shared).map(p => {\r\n        p.create_date = DateTime.fromISO(p.create_date).toJSDate();\r\n        p.edit_date = DateTime.fromISO(p.edit_date).toJSDate();\r\n        return p;\r\n    });\r\n    results.userRows = tableList.tables.filter(p => !p.shared).map(p => {\r\n        p.create_date = DateTime.fromISO(p.create_date).toJSDate();\r\n        p.edit_date = DateTime.fromISO(p.edit_date).toJSDate();\r\n        return p;\r\n    });\r\n    return results;\r\n}\r\n\r\nexport function* doListTables(action) {\r\n    try {\r\n        // You can also export the axios call as a function.\r\n        let formdata = new FormData();\r\n        formdata.append('uid',i2b2.model.user);\r\n        formdata.append('pid',i2b2.model.project);\r\n        formdata.append('sid',i2b2.model.session);\r\n        formdata.append('fid','get_tables');\r\n        const response = yield fetch(i2b2.model.endpointUrl, {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: formdata\r\n        });\r\n        if (response.ok) {\r\n            const data = parseData(yield response.json());\r\n            i2b2.model.tableList = data;\r\n            i2b2.state.save();\r\n            yield put(listTablesSuccess(data));\r\n        } else {\r\n            yield put(listTablesError({errorMessage: \"There was an error retrieving the list of tables\"}));\r\n        }\r\n    } catch (error) {\r\n        yield put(listTablesError({errorMessage: \"There was an error retrieving the list of tables\"}));\r\n    }\r\n}\r\n\r\n\r\nexport function* listTablesSaga() {\r\n    yield takeLatest(LIST_TABLES, doListTables);\r\n}","import { takeLatest, put} from \"redux-saga/effects\";\r\nimport {makeRequestSuccess, makeRequestError} from \"../reducers/makeRequestSlice\";\r\nimport {\r\n    MAKE_REQUEST\r\n} from \"../actions\";\r\n/* global i2b2 */\r\n\r\nconst transformTableDef = (tableDefRows) => {\r\n    let requiredRows = {};\r\n    let concepts = [];\r\n\r\n    let index=0;\r\n    tableDefRows.forEach(row => {\r\n       if(row.required){\r\n           requiredRows[row.id] = {\r\n                name: row.name,\r\n               display: row.display,\r\n               locked: row.locked\r\n           }\r\n       }\r\n       else{\r\n           concepts.push({\r\n               index: index,\r\n               dataOption: row.dataOptions,\r\n               textDisplay: row.name,\r\n               locked: false,\r\n               sdxData: row.sdxData\r\n           });\r\n           index++;\r\n       }\r\n    });\r\n\r\n    const newTdef = {\r\n        required: requiredRows,\r\n        concepts: concepts,\r\n    }\r\n\r\n    return newTdef;\r\n}\r\nexport function* doMakeRequest(action) {\r\n    let { makeRequestDetails, tableDefRows } = action.payload;\r\n\r\n    const metadata = {\r\n        email: makeRequestDetails.email,\r\n        comments: makeRequestDetails.comments\r\n    }\r\n\r\n    try {\r\n        let formdata = new FormData();\r\n        formdata.append('uid',i2b2.model.user);\r\n        formdata.append('pid',i2b2.model.project);\r\n        formdata.append('sid',i2b2.model.session);\r\n        formdata.append('tdef', JSON.stringify(transformTableDef(tableDefRows)));\r\n        formdata.append('pset', JSON.stringify(makeRequestDetails.patientSet));\r\n        formdata.append('metadata', JSON.stringify(metadata));\r\n        formdata.append('fid','make_request');\r\n\r\n        const fetchConfig = {\r\n            method: \"POST\",\r\n            mode: \"cors\",\r\n            body: formdata\r\n        };\r\n\r\n        const response = yield fetch(i2b2.model.endpointUrl, fetchConfig);\r\n        if(response.ok) {\r\n            yield put(makeRequestSuccess());\r\n        }else{\r\n            yield put(makeRequestError({errorMessage: \"There was an error making the request\"}));\r\n        }\r\n    } catch (error) {\r\n        yield put(makeRequestError({errorMessage: \"There was an error making the request\"}));\r\n    }\r\n}\r\n\r\n\r\nexport function* makeRequestSaga() {\r\n    yield takeLatest(MAKE_REQUEST, doMakeRequest);\r\n}\r\n","import * as sagas from './sagas';\r\n\r\nexport const initSagas = (sagaMiddleware) => {\r\n    Object.values(sagas).forEach(sagaMiddleware.run.bind(sagaMiddleware));\r\n};\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { initSagas } from '../initSagas';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { defaultState } from '../defaultState';\r\nimport rootReducers from \"../reducers/rootReducer\";\r\n\r\nlet store;\r\n\r\nexport const getStore = () => {\r\n    if (!store) {\r\n        const sagaMiddleware = createSagaMiddleware();\r\n\r\n        store = configureStore({\r\n            reducer:  rootReducers,\r\n            preloadedState: defaultState,\r\n            middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware),\r\n        });\r\n\r\n        initSagas(sagaMiddleware);\r\n    }\r\n    return store;\r\n}\r\n","import loadTableReducer from './loadTableSlice';\r\nimport saveTableReducer from './saveTableSlice';\r\nimport listTablesReducer from './listTablesSlice';\r\nimport makeRequestReducer from './makeRequestSlice';\r\nimport i2b2LibLoadedReducer from './i2b2LibLoadedSlice';\r\n\r\nconst rootReducers = {\r\n    tableDef: loadTableReducer,\r\n    saveTable: saveTableReducer,\r\n    tableListing : listTablesReducer,\r\n    makeRequestDetails: makeRequestReducer,\r\n    isI2b2LibLoaded: i2b2LibLoadedReducer\r\n};\r\n\r\nexport default rootReducers;","/* global i2b2 */\r\nimport '@fontsource/roboto/300.css';\r\nimport '@fontsource/roboto/400.css';\r\nimport '@fontsource/roboto/500.css';\r\nimport '@fontsource/roboto/700.css';\r\n\r\nimport * as React from 'react';\r\nimport './App.css';\r\nimport theme from \"./theme\";\r\nimport {DataExport} from \"./components\";\r\nimport { Provider } from 'react-redux';\r\nimport {ThemeProvider} from \"@mui/material/styles\";\r\nimport { getStore } from \"./store/getStore\";\r\n\r\nconst store = getStore();\r\n\r\nexport default () => {\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Provider store={store}>\r\n                <DataExport />\r\n            </Provider>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\n\r\n// ---------------------------------------------------------------------------------------\r\nwindow.addEventListener(\"I2B2_READY\", ()=> {\r\n    // the i2b2 framework is loaded and ready (including population of i2b2.model namespace)\r\n    if (i2b2.model.tableDef === undefined) {\r\n        i2b2.model.tableDef = {};\r\n    } else {\r\n        console.log(\"load previous table state\");\r\n    }\r\n    // get the authentication info and save it to our model\r\n    i2b2.authorizedTunnel.variable[\"i2b2.PM.model.login_username\"].then((username) => {\r\n        i2b2.model.user = username;\r\n        i2b2.state.save();\r\n    });\r\n    i2b2.authorizedTunnel.variable[\"i2b2.PM.model.login_project\"].then((project) => {\r\n        i2b2.model.project = project;\r\n        i2b2.state.save();\r\n    });\r\n    i2b2.authorizedTunnel.variable[\"i2b2.PM.model.login_password\"].then((password) => {\r\n        let s = password.indexOf('SessionKey:');\r\n        let e = password.lastIndexOf('<');\r\n        i2b2.model.session = password.substr(s+11,e-s-11);\r\n        i2b2.state.save();\r\n    });\r\n\r\n    setTimeout(()=>{\r\n        const testCredentials = new Request(\"test_credentials.json\");\r\n        fetch(testCredentials)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                i2b2.model.user = data.username;\r\n                i2b2.model.project = data.project;\r\n                i2b2.model.session = data.password;\r\n            })\r\n            .catch();\r\n    }, 200);\r\n});\r\n","import React from 'react'\r\nimport { createRoot } from 'react-dom/client'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nconst root = createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}